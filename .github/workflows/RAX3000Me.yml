name: RAX3000Me
on:
  push:
    branches:
      - main
    paths:
      - 'RAX3000Me/packages.txt'
  workflow_dispatch:
  schedule:
    - cron: '0 0 1 * *'

env:
  SDK_URL: https://downloads.immortalwrt.org/releases/24.10-SNAPSHOT/targets/mediatek/filogic/immortalwrt-sdk-24.10-SNAPSHOT-mediatek-filogic_gcc-13.3.0_musl.Linux-x86_64.tar.zst
  DOWNLOAD_URL: https://downloads.immortalwrt.org/releases/24.10-SNAPSHOT/targets/mediatek/filogic/immortalwrt-imagebuilder-24.10-SNAPSHOT-mediatek-filogic.Linux-x86_64.tar.zst
  PROFILE: cmcc_rax3000me
  FILES_FOLDER: RAX3000Me/files
  UCI_CUSTOM_FILE: RAX3000Me/uci-custom
  PACKAGES_LIST: RAX3000Me/packages.txt
  DIY_SH: RAX3000Me/diy.sh
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: 检查项目分支
      uses: actions/checkout@main

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo apt update
        sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'
        sudo apt autoremove --purge
        sudo apt clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        echo "FIRMWARE_VERSION=$(date +"%y%m%d")" >> $GITHUB_ENV
        echo "START_DATE=$(date +%s)" >> $GITHUB_ENV

    - name: 下载 OpenWrt SDK
      working-directory: /workdir
      run: |
        df -hT $PWD
        # 下载 openwrt_sdk
        wget -O openwrt_sdk.tar.zst $SDK_URL
        mkdir -p openwrt_sdk
        tar -C openwrt_sdk -xvf openwrt_sdk.tar.zst --strip-components 1
        ln -sf /workdir/openwrt_sdk $GITHUB_WORKSPACE/openwrt_sdk

    - name: 加载 OpenWrt SDK 软件源
      run: |
        chmod +x $DIY_SH
        cd openwrt_sdk
        $GITHUB_WORKSPACE/$DIY_SH

    - name: 更新并下载 OpenWrt SDK 软件源
      run: |
        cd openwrt_sdk
        ./scripts/feeds update -a && ./scripts/feeds install -a
        make defconfig

    - name: 开始编译 PACKAGE
      id: compile_package
      run: |
        cd openwrt_sdk
        # 编译软件
        while IFS= read -r package; do
            [[ -z "$package" ]] && continue
            if [[ "$package" != "#"* ]]; then
                echo "正在编译: $package"
                make "package/$package/compile" -j$(nproc) || make "package/$package/compile" -j1 V=s
            fi
        done < "packages_compile"
        mkdir -p packages
        # 编译完成后，将编译好的软件包复制到 packages 文件夹
        while read line; do
          path=$(find bin/packages/*/base -type f -name "$line*")
          echo $path
          # cp $path packages
          find ./bin/packages/*/base -type f -name "${line}*" -exec cp -t ./packages {} +
        done < packages_list
        
    - name: 下载 Image Builder
      working-directory: /workdir
      run: |
        df -hT $PWD
        wget -O image_builder.tar.zst $DOWNLOAD_URL
        mkdir -p image_builder
        tar -C image_builder -xvf image_builder.tar.zst --strip-components 1
        ln -sf /workdir/image_builder $GITHUB_WORKSPACE/image_builder

    - name: 加载自定义配置以及三方软件包
      run: |
        [ -e $FILES_FOLDER ] && mv $FILES_FOLDER image_builder/files
        [ -e $PACKAGES_LIST ] && mv $PACKAGES_LIST image_builder/packages.txt
        # 新建文件夹
        mkdir -p image_builder/packages
        # 复制IPK包
        cp openwrt_sdk/packages/*.ipk image_builder/packages
        rm -rf openwrt_sdk/*

    - name: 编译固件
      id: compile
      run: |
        cd image_builder
        PACKAGES=$(cat packages.txt | tr '\n' ' ')
        make image PROFILE="$PROFILE" PACKAGES="$PACKAGES" FILES="files"
        echo "status=success" >> $GITHUB_OUTPUT
    
    - name: 整理文件
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        # 整理固件包时候,删除您不想要的固件或者文件,让它不需要上传到Actions空间
        cd image_builder/bin/targets/*/*
        rm -rf sha256sums
        rm -rf *.manifest
        rm -rf *.json
        mv *sysupgrade.itb RAX3000Me-${FIRMWARE_VERSION}-squashfs-sysupgrade.itb
        for f in *cmcc_rax3000me*; do mv -- "$f" "cmcc_rax3000me-${f#*cmcc_rax3000me-}"; done
        echo -e "$(sha256sum *)\n" > sha256sums
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 删除旧的Release
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAG_NAME: RAX3000Me
      run: |
        RELEASE_URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME"
        RELEASE_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" $RELEASE_URL | jq -r '.id')
        if [ "$RELEASE_ID" != "null" ]; then
          echo "🗑️ 删除Release中: $RELEASE_ID..."
          curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
          echo "✅ Release删除成功!"
        else
          echo "⚠️ 未找到tag的Release: $TAG_NAME"
        fi

    - name: 创建release标签
      id: tag
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "编译时间：$(date -d "@${{ env.START_DATE }}" +"%Y年%m月%d日 %H点%M分")" >> release.txt
        echo "默认网关：192.168.5.1" >> release.txt
        echo 包含插件：$(grep "luci-app-\(.*\)" image_builder/packages.txt | sed "s/luci-app-\(.*\)/\1/g" | tr '\n' ' ') >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT
  
    - name: 将固件上传到release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      id: upload-release
      with:
        name: RAX3000Me-${{ env.FIRMWARE_VERSION }}
        tag_name: RAX3000Me
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
  
    - name: Telegram 通知
      if: always() && !cancelled()
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHATID: ${{ secrets.TELEGRAM_CHATID }}
      run: |
        duration=$((($(date +%s)-${{ env.START_DATE }})/60)) && time=$((duration/60))小时$((duration%60))分钟
        if [ "${{ steps.compile.outputs.status }}" == 'success' ]; then
          content="🎉RAX3000Me固件编译成功🎉%0A固件版本：${{ env.FIRMWARE_VERSION }}%0A编译用时：${time}"
        else
          content="❌RAX3000Me固件编译失败❌%0A固件版本：${{ env.FIRMWARE_VERSION }}%0A编译用时：${time}"
        fi
        curl "https://api.telegram.org/bot${{ env.TELEGRAM_BOT_TOKEN }}/sendMessage?chat_id=${{ env.TELEGRAM_CHATID }}&text=${content}"
